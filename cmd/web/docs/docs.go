// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "None"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/solvers": {
            "get": {
                "security": [
                    {
                        "OAuth2AccessCode ": [
                            "read"
                        ]
                    }
                ],
                "description": "Lists days which the solver can solve",
                "tags": [
                    "solverList"
                ],
                "summary": "Solve List",
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/solver.RegistryItemPublic"
                            }
                        }
                    },
                    "401": {
                        "description": "Unathorized",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    },
                    "429": {
                        "description": "Request was Rate limited",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    }
                }
            }
        },
        "/solvers/{day}/{part}": {
            "post": {
                "security": [
                    {
                        "OAuth2AccessCode ": [
                            "read"
                        ]
                    }
                ],
                "description": "Provides solution for the day and part based on input",
                "tags": [
                    "solver"
                ],
                "summary": "Solver",
                "parameters": [
                    {
                        "type": "string",
                        "example": "d1",
                        "description": "Day, format d[0-9]*",
                        "name": "day",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Problem part",
                        "name": "part",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Solve Base64 encoded input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SolveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                            "$ref": "#/definitions/api.SolveResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    },
                    "401": {
                        "description": "Unathorized",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    },
                    "404": {
                        "description": "Solver for the day not found",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    },
                    "429": {
                        "description": "Request was Rate limited",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/weberrors.AoCError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.SolveRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string",
                    "format": "base64",
                    "example": "MyAgIDQKNCAgIDMKMiAgIDUKMSAgIDMKMyAgIDkKMyAgIDMK"
                }
            }
        },
        "api.SolveResult": {
            "type": "object",
            "properties": {
                "output": {
                    "type": "string"
                }
            }
        },
        "solver.RegistryItemPublic": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "next": {
                    "type": "boolean"
                }
            }
        },
        "weberrors.AoCError": {
            "type": "object",
            "properties": {
                "errorcode": {
                    "type": "integer"
                },
                "errormessage": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "OAuth2AccessCode": {
            "description": "GitHub OAuth",
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://github.com/login/oauth/authorize",
            "tokenUrl": "https://github.com/login/oauth/access_token",
            "scopes": {
                "read": "Grants read access"
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Advent of Code 2024 Solver API",
	Description:      "Solver for AoC 2024 written in Go",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
